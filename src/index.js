import { Bot, InlineKeyboard } from "grammy";

const bot = new Bot(process.env.BOT_TOKEN);

bot.command("start", async (ctx) => await showMenu(ctx, true));

bot.on("callback_query:data", async (ctx) => {
    const callbackData = ctx.callbackQuery.data;

    switch (callbackData) {
        case "menu":
            await showMenu(ctx, false);
            break;
        case "create_shop":
            await handleCreateShop(ctx);
            break;
        case "get_shops":
            break;
    }
});
async function showMenu(ctx, isNewMessage) {
    const keyboard = new InlineKeyboard();
    keyboard
        .text("üè¨ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", "create_shop")
        .row()
        .text("üõçÔ∏è –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã", "get_shops");

    const message =
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n" +
        "üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –≤ Telegram –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá";

    
    if(isNewMessage) {
        await ctx.reply(message,
            {
                reply_markup: keyboard,
            }
        );
    } else {
        await ctx.editMessageText(message,
            {
                reply_markup: keyboard,
            }
        );
    }
}

async function handleCreateShop(ctx) {
    const backButton = new InlineKeyboard();
    backButton.text("‚ùå –ù–∞–∑–∞–¥", "menu");

    await ctx.editMessageText("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", {
        reply_markup: backButton,
    });
}

bot.start();
