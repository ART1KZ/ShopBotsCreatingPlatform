import { Context, InlineKeyboard } from "grammy";
import { supabase } from "../../../shared/utils/database/index.js";
import { run } from "@grammyjs/runner";
import { activeShopBotsHandlers } from "../../bot.js";
import { encryptData } from "../../../shared/utils/encryption.js";
import { createShopBot } from "../../../shop-bot/bot.js";
import { sendUnexpectedErrorMessage } from "../../../shared/utils/error.js";

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
 * @param {Context} ctx
 */
export async function createShopHandler(ctx) {
    ctx.session.step = "token_input";
    
    await ctx.editMessageText("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", {
        reply_markup: new InlineKeyboard().text("‚ùå –ù–∞–∑–∞–¥", "menu"),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @param {Context} ctx
 */
export async function tokenInputHandler(ctx) {
    ctx.session.step = undefined;

    try {
        const userMessage = ctx.message.text.trim();
        const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;

        if (!tokenRegex.test(userMessage)) {
            ctx.session.step = undefined;

            await ctx.reply(
                "üòì –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞\n" +
                    "üëá –û–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n" +
                    "<code>123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</code>",
                {
                    parse_mode: "HTML",
                    reply_markup: new InlineKeyboard()
                        .text("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", "create_shop")
                        .text("‚ùå –ù–∞–∑–∞–¥", "menu"),
                }
            );
            return;
        }

        const botTokenHash = encryptData(userMessage);
        const shopOwnerId = ctx.message.from.id;

        const { error } = await supabase
            .from("shops")
            .insert([
                { bot_token_hash: botTokenHash, owner_id: shopOwnerId },
            ]);

        if (error) {
            // –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è bot_token_hash)
            if (error.code === "23505") {
                await ctx.reply(
                    "üòì –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω",
                    {
                        reply_markup: new InlineKeyboard()
                            .text("üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", "create_shop")
                            .text("‚ùå –ù–∞–∑–∞–¥", "menu"),
                    }
                );
            } else {
                await sendUnexpectedErrorMessage(ctx, error);
            }
            return;
        }

        const shopBot = createShopBot(userMessage);
        const shopBotProcess = run(shopBot);
        activeShopBotsHandlers.set(botTokenHash, shopBotProcess);

        const shopBotUsername = (await shopBot.api.getMe()).username;

        await ctx.reply(
            "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n" +
                `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: t.me/${shopBotUsername}`,
            {
                reply_markup: new InlineKeyboard().text(
                    "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    "menu"
                ),
            }
        );
    } catch (error) {
        await sendUnexpectedErrorMessage(ctx, false, error);
    }
}
