import { supabase } from "../../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";
import { decryptData } from "../../../../../shared/utils/encryption.js";
import { Bot } from "grammy";
import { activeShopBotsHandlers } from "../../../../bot.js";
import { isShopBotRunning, stopShopBot } from "../../../../../shared/utils/shopBotsManager.js";

// ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ getShopsHandler –∏ manageShopHandler –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
 * @param {Context} ctx
 */
export async function deleteShopHandler(ctx) {
    const shopId = ctx.callbackQuery.data.split("_")[2];

    const { data: shop, error } = await supabase
        .from("shops")
        .select("bot_token_hash")
        .eq("id", shopId)
        .single();

    if (error || !shop) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    const botToken = decryptData(shop.bot_token_hash);
    const shopName = (await new Bot(botToken).api.getMe()).first_name;

    const keyboard = new InlineKeyboard()
        .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", `confirm_delete_shop_${shopId}`)
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_shop_${shopId}`);

    await ctx.editMessageText(
        `<b>üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω <b>${shopName}</b>? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
 * @param {Context} ctx
 */
export async function confirmDeleteShopHandler(ctx) {
    const shopId = ctx.callbackQuery.data.split("_")[3];

    const { data: shop, error } = await supabase
        .from("shops")
        .select("bot_token_hash")
        .eq("id", shopId)
        .single();

    if (error || !shop) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    const botToken = decryptData(shop.bot_token_hash);
    const shopName = (await new Bot(botToken).api.getMe()).first_name;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    if (isShopBotRunning(botToken)) {
        await stopShopBot(botToken);
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
        await supabase.from("purchases").delete().eq("shop_id", shopId);
        await supabase.from("user_chats").delete().eq("shop_id", shopId);
        await supabase.from("product_datas").delete().in("product_id", (
            await supabase.from("products").select("id").eq("category_id", (
                await supabase.from("categories").select("id").eq("shop_id", shopId)
            ).data.map(cat => cat.id))
        ).data.map(prod => prod.id));
        await supabase.from("products").delete().in("category_id", (
            await supabase.from("categories").select("id").eq("shop_id", shopId)
        ).data.map(cat => cat.id));
        await supabase.from("categories").delete().eq("shop_id", shopId);
        await supabase.from("administrators").delete().eq("shop_id", shopId);
        await supabase.from("shops").delete().eq("id", shopId);

        await ctx.editMessageText(
            `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ú–∞–≥–∞–∑–∏–Ω <b>${shopName}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üõí –ö —Å–ø–∏—Å–∫—É –º–∞–≥–∞–∑–∏–Ω–æ–≤", "get_shops"),
            }
        );
    } catch (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω: ${error.message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
    }
}