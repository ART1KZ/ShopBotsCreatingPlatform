import { supabase } from "../../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * @param {Context} ctx
 */
export async function getCategoriesHandler(ctx) {
    ctx.session.step = undefined;
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];
    const keyboard = new InlineKeyboard();

    let { data: categories, error } = await supabase
        .from("categories")
        .select("*")
        .eq("shop_id", shopId)
        .is("parent_id", null); // –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if (error) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text(
                    "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    "menu"
                ),
            }
        );
        return;
    }

    if (categories.length > 0) {
        for (const category of categories) {
            const index = categories.indexOf(category);
            keyboard.text(
                `${category.name}`,
                `manage_category_${category.id}_${shopId}`
            );
            if (index === categories.length - 1 || (index + 1) % 2 === 0) {
                keyboard.row();
            }
        }
    }

    keyboard
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `add_category_${shopId}`)
        .text("üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `generate_category_${shopId}`)
        .row()
        .text("‚ùå –ù–∞–∑–∞–¥", `manage_shop_${shopId}`);
    await ctx.editMessageText(
        "<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
export async function addCategoryHandler(ctx) {
    const addCategoryKeyboard = new InlineKeyboard();
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];

    addCategoryKeyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `get_categories_${shopId}`);
    ctx.session.step = `add_category_input_${shopId}`;

    await ctx.editMessageText(
        "<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        {
            parse_mode: "HTML",
            reply_markup: addCategoryKeyboard,
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function addCategoryInputHandler(ctx) {
    const shopId = ctx.session.step.split("_")[3];
    const newCategoryName = ctx.message.text;

    const { error } = await supabase
        .from("categories")
        .insert([{ name: newCategoryName, shop_id: shopId }])
        .select();

    if (error) {
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${newCategoryName}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text(
                    "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                    `get_categories_${shopId}`
                ),
            }
        );
        return;
    }

    await ctx.reply(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${newCategoryName}"</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text(
                "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                `get_categories_${shopId}`
            ),
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏),
 * –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
 * @param {Context} ctx
 */
export async function manageCategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: category, error: catError } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (catError || !category) {
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text(
                "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "menu"
            ),
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π (parent_id –Ω–µ null)
    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const entityName = category.name;
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    let messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> ${entityType} "${entityName}"\n`;
    if (isSubcategory && parentCategoryName) {
        messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
    }
    messageText += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";

    if (!isSubcategory) {
        // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let { data: subcategories, error: subcatError } = await supabase
            .from("categories")
            .select("*")
            .eq("parent_id", categoryId);

        if (subcatError) {
            await ctx.editMessageText(
                "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                {
                    parse_mode: "HTML",
                    reply_markup: new InlineKeyboard().text(
                        "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        "menu"
                    ),
                }
            );
            return;
        }

        if (subcategories.length > 0) {
            for (const subcategory of subcategories) {
                const index = subcategories.indexOf(subcategory);
                keyboard.text(
                    `${subcategory.name}`,
                    `manage_category_${subcategory.id}_${shopId}`
                );
                if (
                    index === subcategories.length - 1 ||
                    (index + 1) % 2 === 0
                ) {
                    keyboard.row();
                }
            }
            keyboard
                .text(
                    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    `add_subcategory_${categoryId}_${shopId}`
                )
                .text(
                    "üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    `generate_subcategory_${shopId}_${categoryId}`
                )
                .row()
                .text(
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    `edit_category_${categoryId}_${shopId}`
                )
                .text(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    `delete_category_${categoryId}_${shopId}`
                )
                .row()
                .text("‚ùå –ù–∞–∑–∞–¥", `get_categories_${shopId}`);
            messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${entityName}"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;
            return await ctx.editMessageText(messageText, {
                parse_mode: "HTML",
                reply_markup: keyboard,
            });
        }
    }

    // –î–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    let { data: products, error: prodError } = await supabase
        .from("products")
        .select("*")
        .eq("category_id", categoryId);

    if (prodError) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text(
                    "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    "menu"
                ),
            }
        );
        return;
    }

    if (products.length > 0) {
        for (const product of products) {
            const index = products.indexOf(product);
            keyboard.text(
                `${product.name}`,
                `manage_product_${product.id}_${shopId}`
            );
            if (index === products.length - 1 || (index + 1) % 2 === 0) {
                keyboard.row();
            }
        }

        keyboard
            .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", `add_product_${categoryId}_${shopId}`)
            .row()
            .text(
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                `edit_category_${categoryId}_${shopId}`
            )
            .text(
                "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                `delete_category_${categoryId}_${shopId}`
            )
            .row()
            .text(
                "‚ùå –ù–∞–∑–∞–¥",
                isSubcategory
                    ? `manage_category_${category.parent_id}_${shopId}`
                    : `get_categories_${shopId}`
            );
        messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> ${entityType} "${entityName}"\n`;
        if (isSubcategory && parentCategoryName) {
            messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
        }
        messageText += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";
        return await ctx.editMessageText(messageText, {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
    }

    if (!isSubcategory) {
        keyboard
            .text(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                `add_subcategory_${categoryId}_${shopId}`
            )
            .text(
                "üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                `generate_subcategory_${shopId}_${categoryId}`
            )
            .row();
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", `add_product_${categoryId}_${shopId}`)
        .row()
        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `edit_category_${categoryId}_${shopId}`)
        .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `delete_category_${categoryId}_${shopId}`)
        .row();

    keyboard.text(
        "‚ùå –ù–∞–∑–∞–¥",
        isSubcategory
            ? `manage_category_${category.parent_id}_${shopId}`
            : `get_categories_${shopId}`
    );

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
export async function addSubcategoryHandler(ctx) {
    const addCategoryKeyboard = new InlineKeyboard();
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];

    let { data: category, error } = await supabase
        .from("categories")
        .select("*")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        addCategoryKeyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: addCategoryKeyboard,
        });
        return;
    }

    addCategoryKeyboard.text(
        "‚ùå –û—Ç–º–µ–Ω–∞",
        `manage_category_${categoryId}_${shopId}`
    );
    ctx.session.step = `add_subcategory_input_${categoryId}_${shopId}`;

    await ctx.editMessageText(
        `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${category.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`,
        {
            parse_mode: "HTML",
            reply_markup: addCategoryKeyboard,
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function addSubcategoryInputHandler(ctx) {
    const newSubcategoryName = ctx.message.text;
    const callbackDataParts = ctx.session.step.split("_");
    const categoryId = callbackDataParts[3];
    const shopId = callbackDataParts[4];
    const successfullKeyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("id, shop_id, name")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        successfullKeyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.reply("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: successfullKeyboard,
        });
        return;
    }

    const { error: insertError } = await supabase
        .from("categories")
        .insert([
            {
                name: newSubcategoryName,
                parent_id: categoryId,
                shop_id: category.shop_id,
            },
        ])
        .select();

    if (insertError) {
        console.error("Error inserting subcategory:", insertError);
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${newSubcategoryName}"</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${category.name}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: successfullKeyboard.text(
                    "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    `manage_category_${categoryId}_${shopId}`
                ),
            }
        );
        return;
    }

    ctx.session.step = undefined;
    successfullKeyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        `manage_category_${categoryId}_${shopId}`
    );
    await ctx.reply(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${newSubcategoryName}"</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${category.name}"</b>.`,
        {
            parse_mode: "HTML",
            reply_markup: successfullKeyboard,
        }
    );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Context} ctx
 */
export async function editCategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_category_${categoryId}_${shopId}`);
    ctx.session.step = `edit_category_input_${categoryId}_${shopId}`;

    let messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> ${entityType} "${category.name}"\n`;
    if (isSubcategory && parentCategoryName) {
        messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
    }
    messageText += `<b>‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> ${category.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`;

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function editCategoryInputHandler(ctx) {
    const callbackDataParts = ctx.session.step.split("_");
    const categoryId = callbackDataParts[3];
    const shopId = callbackDataParts[4];
    const newCategoryName = ctx.message.text;
    const keyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.reply("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    const { error: updateError } = await supabase
        .from("categories")
        .update({ name: newCategoryName })
        .eq("id", categoryId);

    if (updateError) {
        keyboard.text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            `manage_category_${categoryId}_${shopId}`
        );
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    ctx.session.step = undefined;
    keyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        `manage_category_${categoryId}_${shopId}`
    );
    let messageText = `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n${entityType} <b>"${newCategoryName}"</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`;
    if (isSubcategory && parentCategoryName) {
        messageText += ` –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"${parentCategoryName}"</b>`;
    }
    messageText += ".";

    await ctx.reply(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 * @param {Context} ctx
 */
export async function deleteCategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    const { error: deleteError } = await supabase
        .from("categories")
        .delete()
        .eq("id", categoryId);

    if (deleteError) {
        keyboard.text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            `manage_category_${categoryId}_${shopId}`
        );
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    keyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
        isSubcategory
            ? `manage_category_${category.parent_id}_${shopId}`
            : `get_categories_${shopId}`
    );
    let messageText = `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n${entityType} <b>"${category.name}"</b> –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`;
    if (isSubcategory && parentCategoryName) {
        messageText += ` –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"${parentCategoryName}"</b>`;
    }
    messageText += ".";

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 * @param {Context} ctx
 */
export async function addProductHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_category_${categoryId}_${shopId}`);
    ctx.session.step = `add_product_input_${categoryId}_${shopId}`;

    let messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n<b>üóÇ ${entityType}:</b> ${category.name}\n`;
    if (isSubcategory && parentCategoryName) {
        messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
    }
    messageText +=
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n‚Ä¢ –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]";

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function addProductInputHandler(ctx) {
    const callbackDataParts = ctx.session.step.split("_");
    const categoryId = callbackDataParts[3];
    const shopId = callbackDataParts[4];
    const inputText = ctx.message.text;
    const keyboard = new InlineKeyboard();

    let { data: category, error } = await supabase
        .from("categories")
        .select("*, parent:categories!parent_id(name)")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.reply("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nameMatch = inputText.match(/–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.+)/i);
    const priceMatch = inputText.match(/–¶–µ–Ω–∞:\s*(\d+\.?\d*)/i);

    if (!nameMatch || !priceMatch) {
        keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_category_${categoryId}_${shopId}`);
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n‚Ä¢ –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    const productName = nameMatch[1].trim();
    const productPrice = parseFloat(priceMatch[1]);

    if (isNaN(productPrice) || productPrice <= 0) {
        keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_category_${categoryId}_${shopId}`);
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0 –¥–ª—è ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    const { data: product, error: insertError } = await supabase
        .from("products")
        .insert([
            {
                name: productName,
                category_id: categoryId,
                price: productPrice,
            },
        ])
        .select("*")
        .single()

    if (insertError) {
        keyboard.text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            `manage_category_${categoryId}_${shopId}`
        );
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä <b>"${productName}"</b> –≤ ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    const { data } = await supabase.from("product_datas").insert([
        { data: "1", product_id: product.id },
        { data: "2", product_id: product.id },
        { data: "3", product_id: product.id },
        { data: "4", product_id: product.id },
        { data: "5", product_id: product.id },
    ]);

    ctx.session.step = undefined;
    keyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        `manage_category_${categoryId}_${shopId}`
    );
    let messageText = `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–¢–æ–≤–∞—Ä <b>"${productName}"</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${entityType.toLowerCase()} <b>"${
        category.name
    }"</b>`;
    if (isSubcategory && parentCategoryName) {
        messageText += ` (–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${parentCategoryName}"</b>)`;
    }
    messageText += ".";

    await ctx.reply(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
 * @param {Context} ctx
 */
export async function manageProductHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const productId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: product, error } = await supabase
        .from("products")
        .select(
            `
            *,
            categories (
                id,
                name,
                parent_id,
                parent:categories!parent_id(name)
            )
        `
        )
        .eq("id", productId)
        .single();

    if (error || !product) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const category = product.categories;
    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    keyboard
        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", `edit_product_${productId}_${shopId}`)
        .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", `delete_product_${productId}_${shopId}`)
        .row()
        .text("‚ùå –ù–∞–∑–∞–¥", `manage_category_${category.id}_${shopId}`);

    let messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –¢–æ–≤–∞—Ä "${product.name}"\n<b>üóÇ ${entityType}:</b> ${category.name}\n`;
    if (isSubcategory && parentCategoryName) {
        messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
    }
    messageText += `<b>üíµ –¶–µ–Ω–∞:</b> ${product.price}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
 * @param {Context} ctx
 */
export async function editProductHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const productId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: product, error } = await supabase
        .from("products")
        .select(
            `
            *,
            categories (
                id,
                name,
                parent_id,
                parent:categories!parent_id(name)
            )
        `
        )
        .eq("id", productId)
        .single();

    if (error || !product) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const category = product.categories;
    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_product_${productId}_${shopId}`);
    ctx.session.step = `edit_product_input_${productId}_${shopId}`;

    let messageText = `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –¢–æ–≤–∞—Ä "${product.name}"\n<b>üóÇ ${entityType}:</b> ${category.name}\n`;
    if (isSubcategory && parentCategoryName) {
        messageText += `<b>üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategoryName}\n`;
    }
    messageText += `<b>‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> ${product.name}\n<b>üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${product.price}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n‚Ä¢ –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]`;

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function editProductInputHandler(ctx) {
    const callbackDataParts = ctx.session.step.split("_");
    const productId = callbackDataParts[3];
    const shopId = callbackDataParts[4];
    const inputText = ctx.message.text;
    const keyboard = new InlineKeyboard();

    let { data: product, error } = await supabase
        .from("products")
        .select(
            `
            *,
            categories (
                id,
                name,
                parent_id,
                parent:categories!parent_id(name)
            )
        `
        )
        .eq("id", productId)
        .single();

    if (error || !product) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.reply("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const category = product.categories;
    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nameMatch = inputText.match(/–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.+)/i);
    const priceMatch = inputText.match(/–¶–µ–Ω–∞:\s*(\d+\.?\d*)/i);

    if (!nameMatch || !priceMatch) {
        keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_product_${productId}_${shopId}`);
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>"${
                product.name
            }"</b> –≤ ${entityType.toLowerCase()} <b>"${
                category.name
            }"</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n‚Ä¢ –¶–µ–Ω–∞: [—Ü–µ–Ω–∞]`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    const productName = nameMatch[1].trim();
    const productPrice = parseFloat(priceMatch[1]);

    if (isNaN(productPrice) || productPrice <= 0) {
        keyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `manage_product_${productId}_${shopId}`);
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0 –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>"${
                product.name
            }"</b> –≤ ${entityType.toLowerCase()} <b>"${category.name}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    const { error: updateError } = await supabase
        .from("products")
        .update({
            name: productName,
            price: productPrice,
        })
        .eq("id", productId);

    if (updateError) {
        keyboard.text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É",
            `manage_product_${productId}_${shopId}`
        );
        await ctx.reply(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä <b>"${
                product.name
            }"</b> –≤ ${entityType.toLowerCase()} <b>"${category.name}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    ctx.session.step = undefined;
    keyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É",
        `manage_product_${productId}_${shopId}`
    );
    let messageText = `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–¢–æ–≤–∞—Ä <b>"${productName}"</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ ${entityType.toLowerCase()} <b>"${
        category.name
    }"</b>`;
    if (isSubcategory && parentCategoryName) {
        messageText += ` (–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${parentCategoryName}"</b>)`;
    }
    messageText += ".";

    await ctx.reply(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 * @param {Context} ctx
 */
export async function deleteProductHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const productId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: product, error } = await supabase
        .from("products")
        .select(
            `
            *,
            categories (
                id,
                name,
                parent_id,
                parent:categories!parent_id(name)
            )
        `
        )
        .eq("id", productId)
        .single();

    if (error || !product) {
        keyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            parse_mode: "HTML",
            reply_markup: keyboard,
        });
        return;
    }

    const category = product.categories;
    const isSubcategory = category.parent_id !== null;
    const entityType = isSubcategory ? "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" : "–ö–∞—Ç–µ–≥–æ—Ä–∏—è";
    const parentCategoryName =
        isSubcategory && category.parent?.name ? category.parent.name : "";

    const { error: deleteError } = await supabase
        .from("products")
        .delete()
        .eq("id", productId);

    if (deleteError) {
        keyboard.text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É",
            `manage_product_${productId}_${shopId}`
        );
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>"${
                product.name
            }"</b> –≤ ${entityType.toLowerCase()} <b>"${category.name}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
        return;
    }

    keyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        `manage_category_${category.id}_${shopId}`
    );
    let messageText = `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–¢–æ–≤–∞—Ä <b>"${
        product.name
    }"</b> –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ ${entityType.toLowerCase()} <b>"${
        category.name
    }"</b>`;
    if (isSubcategory && parentCategoryName) {
        messageText += ` (–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${parentCategoryName}"</b>)`;
    }
    messageText += ".";

    await ctx.editMessageText(messageText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}
