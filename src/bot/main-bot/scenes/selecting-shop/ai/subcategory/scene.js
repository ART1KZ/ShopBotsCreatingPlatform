import { supabase } from "../../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";
import { sendRequestToMistralAgent } from "../../../../../shared/utils/ai-api.js";
import { decryptData } from "../../../../../shared/utils/encryption.js";
import { Bot } from "grammy";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Context} ctx
 */
export async function generateSubcategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];
    const parentCategoryId = callbackDataParts[3];

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    let { data: shop, error: shopError } = await supabase
        .from("shops")
        .select("bot_token_hash")
        .eq("id", shopId)
        .single();

    if (shopError || !shop) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let { data: parentCategory, error: parentError } = await supabase
        .from("categories")
        .select("name")
        .eq("id", parentCategoryId)
        .eq("shop_id", shopId)
        .single();

    if (parentError || !parentCategory) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let { data: subcategories, error: subcategoriesError } = await supabase
        .from("categories")
        .select("name")
        .eq("shop_id", shopId)
        .eq("parent_id", parentCategoryId);

    if (subcategoriesError) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram API
    const shopBotToken = decryptData(shop.bot_token_hash);
    let shopName;
    try {
        shopName = (await new Bot(shopBotToken).api.getMe()).first_name;
    } catch (error) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É
    const requestJson = {
        shop_name: shopName,
        parent_category: parentCategory.name,
        subcategories: subcategories.map((cat) => cat.name),
    };

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É Mistral
        const response = await sendRequestToMistralAgent(
            process.env.GENERATE_SUBCATEGORY_AGENT_ID,
            {
                ...requestJson,
            }
        );

        if (response.error_message) {
            await ctx.editMessageText(
                `<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>\n${response.error_message}`,
                {
                    parse_mode: "HTML",
                    reply_markup: new InlineKeyboard()
                        .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", `get_categories_${shopId}`)
                        .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
                }
            );
            return;
        }

        const newSubcategory = response.subcategory.split(" ").join("_");

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        const keyboard = new InlineKeyboard()
            .text(
                "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                `generate_subcategory_confirm_${shopId}_${parentCategoryId}_${newSubcategory}`
            )
            .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `get_categories_${shopId}`)
            .row()
            .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");

        await ctx.editMessageText(
            `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n<b>üè™ –ú–∞–≥–∞–∑–∏–Ω:</b> ${shopName}\n<b>üìÅ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${parentCategory.name}\n<b>‚ûï –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${newSubcategory.split("_").join(" ")}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é?`,
            {
                parse_mode: "HTML",
                reply_markup: keyboard,
            }
        );
    } catch (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${error.message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard()
                    .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", `get_categories_${shopId}`)
                    .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Context} ctx
 */
export async function generateSubcategoryAcceptHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[3];
    const parentCategoryId = callbackDataParts[4];
    let newSubcategory = callbackDataParts.slice(5).join(" ");

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
        .from("categories")
        .insert([
            {
                name: newSubcategory,
                shop_id: shopId,
                parent_id: parentCategoryId,
            },
        ])
        .select();

    if (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${newSubcategory}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard()
                    .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", `manage_category_${parentCategoryId}_${shopId}`)
                    .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    ctx.session.step = undefined;
    await ctx.editMessageText(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${newSubcategory}"</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard()
                .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", `manage_category_${parentCategoryId}_${shopId}`)
                .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
        }
    );
}