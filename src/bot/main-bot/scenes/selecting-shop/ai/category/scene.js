import { supabase } from "../../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";
import { sendRequestToMistralAgent } from "../../../../../shared/utils/ai-api.js";
import { decryptData } from "../../../../../shared/utils/encryption.js";
import { Bot } from "grammy";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Context} ctx
 */
export async function generateCategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    let { data: shop, error: shopError } = await supabase
        .from("shops")
        .select("bot_token_hash")
        .eq("id", shopId)
        .single();

    if (shopError || !shop) {
        await ctx.editMessageText("<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text(
                "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "menu"
            ),
        });
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let { data: categories, error: categoriesError } = await supabase
        .from("categories")
        .select("name")
        .eq("shop_id", shopId)
        .is("parent_id", null); // –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è

    if (categoriesError) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text(
                    "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    "menu"
                ),
            }
        );
        return;
    }

    const shopBotToken = decryptData(shop.bot_token_hash);
    const shopName = (await new Bot(shopBotToken).api.getMe()).first_name;
    // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É
    const requestJson = {
        shop_name: shopName,
        categories: categories.map((cat) => cat.name),
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É Mistral
    const response = await sendRequestToMistralAgent(
        process.env.GENERATE_CATEGORY_AGENT_ID,
        requestJson
    );

    if (response.error_message) {
        await ctx.editMessageText(
            `<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:\n` +
                `${response.error_message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard()
                    .text(
                        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        `get_categories_${shopId}`
                    )
                    .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    const newCategory = response.category.split(' ').join('_');;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    const keyboard = new InlineKeyboard()
        .text(
            "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            `generate_category_confirm_${shopId}_${newCategory}`
        )
        .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `get_categories_${shopId}`)
        .row()
        .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");

    await ctx.editMessageText(
        `<b>üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏–∏\n<b>üè™ –ú–∞–≥–∞–∑–∏–Ω:</b> ${shopName}\n<b>‚ûï –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${newCategory.split("_").join(" ")}\n` + `–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?`,
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Context} ctx
 */
export async function generateCategoryAcceptHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");

    const shopId = callbackDataParts[3];
    let newCategory = "";

    for(let i = 4; i < callbackDataParts.length; i++) {
        newCategory += callbackDataParts[i] + ' ';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
        .from("categories")
        .insert([{ name: newCategory, shop_id: shopId }])
        .select();

    if (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"${newCategory}"</b>.`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard()
                    .text(
                        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        `get_categories_${shopId}`
                    )
                    .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    ctx.session.step = undefined;
    await ctx.editMessageText(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"${newCategory}"</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard()
                .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", `get_categories_${shopId}`)
                .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
        }
    );
}
