import { supabase } from "../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";
import { decryptData } from "../../../../shared/utils/encryption.js";
import { Bot } from "grammy";

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞
 * @param {Context} ctx
 */
export async function manageAdminsHandler(ctx) {
    const shopId = ctx.callbackQuery.data.split("_")[2];

    const { data: shop, error: shopError } = await supabase
        .from("shops")
        .select("bot_token_hash")
        .eq("id", shopId)
        .single();

    if (shopError || !shop) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    const botToken = decryptData(shop.bot_token_hash);
    const shopName = (await new Bot(botToken).api.getMe()).first_name;

    const { data: admins, error: adminsError } = await supabase
        .from("administrators")
        .select("id, tg_user_id, can_manage_roles, can_chat_clients, can_manage_products, users(full_name)")
        .eq("shop_id", shopId);

    if (adminsError) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu"),
            }
        );
        return;
    }

    let adminsText = `<b>üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ "${shopName}":</b>\n\n`;
    if (admins.length === 0) {
        adminsText += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n";
    } else {
        admins.forEach((admin) => {
            adminsText += `<b>${admin.users.full_name} (ID: ${admin.tg_user_id})</b>\n`;
            adminsText += `–ü—Ä–∞–≤–∞:\n`;
            adminsText += `- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏: ${admin.can_manage_roles ? "‚úÖ" : "‚ùå"}\n`;
            adminsText += `- –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: ${admin.can_chat_clients ? "‚úÖ" : "‚ùå"}\n`;
            adminsText += `- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏: ${admin.can_manage_products ? "‚úÖ" : "‚ùå"}\n\n`;
        });
    }

    const keyboard = new InlineKeyboard()
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", `add_admin_${shopId}`)
        .row();

    admins.forEach((admin) => {
        keyboard
            .text(`‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ${admin.users.full_name}`, `edit_admin_${shopId}_${admin.id}`)
            .text(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å`, `delete_admin_${shopId}_${admin.id}`)
            .row();
    });

    keyboard.text("üîô –ù–∞–∑–∞–¥", `manage_shop_${shopId}`);

    await ctx.editMessageText(adminsText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
    });
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function addAdminHandler(ctx) {
    const shopId = ctx.callbackQuery.data.split("_")[2];

    ctx.session.step = `add_admin_input_${shopId}`;
    await ctx.editMessageText(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`),
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –∏ –ø—Ä–∞–≤–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function addAdminInputHandler(ctx) {
    const shopId = ctx.session.step.split("_")[2];
    const tgUserId = parseInt(ctx.message.text);

    if (isNaN(tgUserId)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", {
            reply_markup: new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`),
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: user, error: userError } = await supabase
        .from("users")
        .select("telegram_id")
        .eq("telegram_id", tgUserId)
        .single();

    if (userError || !user) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
            reply_markup: new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`),
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const { data: existingAdmin, error: adminError } = await supabase
        .from("administrators")
        .select("id")
        .eq("shop_id", shopId)
        .eq("tg_user_id", tgUserId)
        .single();

    if (adminError && adminError.code !== "PGRST116") { // PGRST116 - –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", {
            reply_markup: new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`),
        });
        return;
    }

    if (existingAdmin) {
        await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞.", {
            reply_markup: new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`),
        });
        return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
    const keyboard = new InlineKeyboard()
        .text("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", `add_admin_rights_${shopId}_${tgUserId}_roles_true`)
        .text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", `add_admin_rights_${shopId}_${tgUserId}_roles_false`)
        .row()
        .text("‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", `add_admin_rights_${shopId}_${tgUserId}_chat_true`)
        .text("‚ùå –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", `add_admin_rights_${shopId}_${tgUserId}_chat_false`)
        .row()
        .text("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", `add_admin_rights_${shopId}_${tgUserId}_products_true`)
        .text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", `add_admin_rights_${shopId}_${tgUserId}_products_false`)
        .row()
        .text("üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `confirm_add_admin_${shopId}_${tgUserId}`)
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`);

    ctx.session.adminRights = {
        can_manage_roles: false,
        can_chat_clients: false,
        can_manage_products: false,
    };

    await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∞–≤ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function addAdminRightsHandler(ctx) {
    const [_, __, shopId, tgUserId, right, value] = ctx.callbackQuery.data.split("_");
    const boolValue = value === "true";

    ctx.session.adminRights[`can_${right}`] = boolValue;

    const keyboard = new InlineKeyboard()
        .text(
            ctx.session.adminRights.can_manage_roles ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
            `add_admin_rights_${shopId}_${tgUserId}_roles_${!ctx.session.adminRights.can_manage_roles}`
        )
        .text(
            ctx.session.adminRights.can_chat_clients ? "‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏" : "‚ùå –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            `add_admin_rights_${shopId}_${tgUserId}_chat_${!ctx.session.adminRights.can_chat_clients}`
        )
        .row()
        .text(
            ctx.session.adminRights.can_manage_products ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
            `add_admin_rights_${shopId}_${tgUserId}_products_${!ctx.session.adminRights.can_manage_products}`
        )
        .text("üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `confirm_add_admin_${shopId}_${tgUserId}`)
        .row()
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`);

    await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function confirmAddAdminHandler(ctx) {
    const [_, __, shopId, tgUserId] = ctx.callbackQuery.data.split("_");

    const { error } = await supabase
        .from("administrators")
        .insert([
            {
                shop_id: shopId,
                tg_user_id: tgUserId,
                can_manage_roles: ctx.session.adminRights.can_manage_roles,
                can_chat_clients: ctx.session.adminRights.can_chat_clients,
                can_manage_products: ctx.session.adminRights.can_manage_products,
            },
        ]);

    ctx.session.step = undefined;
    ctx.session.adminRights = undefined;

    if (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error.message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    await ctx.editMessageText(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
        }
    );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function editAdminHandler(ctx) {
    const [_, __, shopId, adminId] = ctx.callbackQuery.data.split("_");

    const { data: admin, error } = await supabase
        .from("administrators")
        .select("tg_user_id, can_manage_roles, can_chat_clients, can_manage_products, users(full_name)")
        .eq("id", adminId)
        .eq("shop_id", shopId)
        .single();

    if (error || !admin) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    const keyboard = new InlineKeyboard()
        .text(
            admin.can_manage_roles ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
            `update_admin_rights_${shopId}_${adminId}_roles_${!admin.can_manage_roles}`
        )
        .text(
            admin.can_chat_clients ? "‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏" : "‚ùå –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            `update_admin_rights_${shopId}_${adminId}_chat_${!admin.can_chat_clients}`
        )
        .row()
        .text(
            admin.can_manage_products ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
            `update_admin_rights_${shopId}_${adminId}_products_${!admin.can_manage_products}`
        )
        .text("üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `confirm_update_admin_${shopId}_${adminId}`)
        .row()
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`);

    await ctx.editMessageText(
        `<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è ${admin.users.full_name} (ID: ${admin.tg_user_id})</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞:`,
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function updateAdminRightsHandler(ctx) {
    const [_, __, shopId, adminId, right, value] = ctx.callbackQuery.data.split("_");
    const boolValue = value === "true";

    const { data: admin, error } = await supabase
        .from("administrators")
        .select("can_manage_roles, can_chat_clients, can_manage_products")
        .eq("id", adminId)
        .eq("shop_id", shopId)
        .single();

    if (error || !admin) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    admin[`can_${right}`] = boolValue;

    const keyboard = new InlineKeyboard()
        .text(
            admin.can_manage_roles ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
            `update_admin_rights_${shopId}_${adminId}_roles_${!admin.can_manage_roles}`
        )
        .text(
            admin.can_chat_clients ? "‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏" : "‚ùå –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            `update_admin_rights_${shopId}_${adminId}_chat_${!admin.can_chat_clients}`
        )
        .row()
        .text(
            admin.can_manage_products ? "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏" : "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
            `update_admin_rights_${shopId}_${adminId}_products_${!admin.can_manage_products}`
        )
        .text("üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `confirm_update_admin_${shopId}_${adminId}`)
        .row()
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`);

    await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function confirmUpdateAdminHandler(ctx) {
    const [_, __, shopId, adminId] = ctx.callbackQuery.data.split("_");

    const { data: admin, error } = await supabase
        .from("administrators")
        .select("can_manage_roles, can_chat_clients, can_manage_products")
        .eq("id", adminId)
        .eq("shop_id", shopId)
        .single();

    if (error || !admin) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    const { error: updateError } = await supabase
        .from("administrators")
        .update({
            can_manage_roles: admin.can_manage_roles,
            can_chat_clients: admin.can_chat_clients,
            can_manage_products: admin.can_manage_products,
        })
        .eq("id", adminId)
        .eq("shop_id", shopId);

    if (updateError) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${updateError.message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    await ctx.editMessageText(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
        }
    );
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function deleteAdminHandler(ctx) {
    const [_, __, shopId, adminId] = ctx.callbackQuery.data.split("_");

    const { data: admin, error } = await supabase
        .from("administrators")
        .select("tg_user_id, users(full_name)")
        .eq("id", adminId)
        .eq("shop_id", shopId)
        .single();

    if (error || !admin) {
        await ctx.editMessageText(
            "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    const keyboard = new InlineKeyboard()
        .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", `confirm_delete_admin_${shopId}_${adminId}`)
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `manage_admins_${shopId}`);

    await ctx.editMessageText(
        `<b>üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <b>${admin.users.full_name}</b> (ID: ${admin.tg_user_id})?`,
        {
            parse_mode: "HTML",
            reply_markup: keyboard,
        }
    );
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Context} ctx
 */
export async function confirmDeleteAdminHandler(ctx) {
    const [_, __, shopId, adminId] = ctx.callbackQuery.data.split("_");

    const { error } = await supabase
        .from("administrators")
        .delete()
        .eq("id", adminId)
        .eq("shop_id", shopId);

    if (error) {
        await ctx.editMessageText(
            `<b>‚ùå –û—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error.message}`,
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
            }
        );
        return;
    }

    await ctx.editMessageText(
        `<b>‚úÖ –£—Å–ø–µ—Ö!</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`,
        {
            parse_mode: "HTML",
            reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", `manage_admins_${shopId}`),
        }
    );
}