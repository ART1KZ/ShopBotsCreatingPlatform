import { supabase } from "../../../../shared/utils/database/index.js";
import { Context, InlineKeyboard } from "grammy";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * @param {Context} ctx
 */
export async function getCategoriesHandler(ctx) {
    ctx.session.step = undefined;
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];
    const keyboard = new InlineKeyboard();

    let { data: categories, error } = await supabase
        .from("categories")
        .select("*")
        .eq("shop_id", shopId);

    if (categories.length > 0) {
        for (const category of categories) {
            const index = categories.indexOf(category);
            keyboard.text(
                `${category.name}`,
                `manage_category_${category.id}_${shopId}`
            );
            if (index === categories.length - 1 || (index + 1) % 2 == 0) {
                keyboard.row();
            }
        }
    }

    keyboard.text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `add_category_${shopId}`);
    keyboard.text("‚ùå –ù–∞–∑–∞–¥", `manage_shop_${shopId}`);
    await ctx.editMessageText("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
        reply_markup: keyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
export async function addCategoryHandler(ctx) {
    const addCategoryKeyboard = new InlineKeyboard();
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const shopId = callbackDataParts[2];

    addCategoryKeyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", `get_categories_${shopId}`);
    ctx.session.step = `add_category_input_${shopId}`;

    await ctx.editMessageText(`üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, {
        reply_markup: addCategoryKeyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function addCategoryInputHandler(ctx) {
    const shopId = ctx.session.step.split("_")[3];
    const newCategoryName = ctx.message.text;

    await supabase
        .from("categories")
        .insert([{ name: newCategoryName, shop_id: shopId }])
        .select();

    await ctx.reply("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", {
        reply_markup: new InlineKeyboard().text(
            "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            `get_categories_${shopId}`
        ),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏),
 * –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
 * @param {Context} ctx
 */
export async function manageCategoryHandler(ctx) {
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];
    const shopId = callbackDataParts[3];
    const keyboard = new InlineKeyboard();

    let { data: subcategories } = await supabase
        .from("categories")
        .select("*")
        .eq("parent_id", categoryId);

    if (subcategories.length > 0) {
        for (const subcategory of subcategories) {
            const index = subcategories.indexOf(subcategory);
            keyboard.text(
                `${subcategory.name}`,
                `manage_subcategory_${subcategory.id}`
            );
            if (index === subcategories.length - 1 || (index + 1) % 2 == 0) {
                keyboard.row();
            }
        }
        keyboard
            .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", `add_subcategory_${categoryId}`)
            .row()
            .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `edit_category_${categoryId}`)
            .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `delete_category_${categoryId}`)
            .row()
            .text("‚ùå –ù–∞–∑–∞–¥", `get_categories_${shopId}`);
        return await ctx.editMessageText("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
            reply_markup: keyboard,
        });
    }
    let { data: products } = await supabase
        .from("products")
        .select("*")
        .eq("category_id", categoryId);

    if (products.length > 0) {
        for (const product of products) {
            const index = products.indexOf(subcategories);
            keyboard.text(`${product.name}`, `manage_product_${product.id}`);
            if (index === products.length - 1 || (index + 1) % 2 == 0) {
                keyboard.row();
            }
        }

        keyboard
            .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", `add_product_${categoryId}`)
            .row()
            .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `edit_category_${categoryId}`)
            .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `delete_category_${categoryId}`)
            .row()
            .text("‚ùå –ù–∞–∑–∞–¥", `get_categories_${shopId}`);
        return await ctx.editMessageText("üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", {
            reply_markup: keyboard,
        });
    }

    keyboard
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", `add_subcategory_${categoryId}`)
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", `add_product_${categoryId}`)
        .row()
        .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `delete_category_${categoryId}`)
        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", `edit_category_${categoryId}`)
        .row()
        .text("‚ùå –ù–∞–∑–∞–¥", `get_categories_${shopId}`);
    await ctx.editMessageText("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: keyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
export async function addSubcategoryHandler(ctx) {
    const addCategoryKeyboard = new InlineKeyboard();
    const callbackDataParts = ctx.callbackQuery.data.split("_");
    const categoryId = callbackDataParts[2];

    let { data: category, error } = await supabase
        .from("categories")
        .select("*")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        addCategoryKeyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.editMessageText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            reply_markup: addCategoryKeyboard,
        });
        return;
    }

    addCategoryKeyboard.text(
        "‚ùå –û—Ç–º–µ–Ω–∞",
        `manage_category_${categoryId}_${category.shop_id}`
    );
    ctx.session.step = `add_subcategory_input_${categoryId}`;

    await ctx.editMessageText(`üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, {
        reply_markup: addCategoryKeyboard,
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Context} ctx
 */
export async function addSubcategoryInputHandler(ctx) {
    const newSubcategoryName = ctx.message.text;
    const categoryId = ctx.session.step.split("_")[3];
    const successfullKeyboard = new InlineKeyboard();

    // Fetch the parent category to get its shop_id
    let { data: category, error } = await supabase
        .from("categories")
        .select("id, shop_id")
        .eq("id", categoryId)
        .single();

    if (error || !category) {
        successfullKeyboard.text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
        await ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
            reply_markup: successfullKeyboard,
        });
        return;
    }

    // Insert the new subcategory with shop_id
    const { error: insertError } = await supabase
        .from("categories")
        .insert([
            {
                name: newSubcategoryName,
                parent_id: categoryId,
                shop_id: category.shop_id,
            },
        ])
        .select();

    if (insertError) {
        console.error("Error inserting subcategory:", insertError);
        await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.");
        return;
    }

    ctx.session.step = undefined;
    successfullKeyboard.text(
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        `manage_category_${categoryId}_${category.shop_id}`
    );
    await ctx.reply("‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", {
        reply_markup: successfullKeyboard,
    });
}
