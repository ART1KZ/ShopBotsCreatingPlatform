import { Bot, Context, InlineKeyboard } from "grammy";
import { supabase } from "../../../shared/utils/database/index.js";
import { decryptData } from "../../../shared/utils/encryption.js";
import { activeShopBotsHandlers } from "../../bot.js";
import { sendUnexpectedErrorMessage } from "../../../shared/utils/error.js";
import { run } from "@grammyjs/runner";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
export async function getShopsHandler(ctx) {
    const shopsKeyboard = new InlineKeyboard();
    const messageSenderId = ctx.callbackQuery.from.id;

    try {
        // –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        const { data: ownerShopsHashes, error: ownerError } = await supabase
            .from("shops")
            .select("bot_token_hash")
            .eq("owner_tg_id", messageSenderId);
    
        if(ownerError) throw new Error(ownerError);
    
        for (const tokenHash of ownerShopsHashes) {
            const botToken = decryptData(tokenHash.bot_token_hash);
            const shopName = (await new Bot(botToken).api.getMe()).first_name;
            shopsKeyboard.text(`üëë ${shopName}`, `manage_shop`).row();
        }
    
        // –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ —Å–≤—è–∑—å—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏, –≥–¥–µ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        const { data: adminShopsHashes, error: adminError } = await supabase
            .from("administrators")
            .select("bot_token_hash")
            .eq("tg_user_id", messageSenderId);
    
        if(adminError) throw new Error(adminError);
    
        for (const tokenHash of adminShopsHashes) {
            const botToken = decryptData(tokenHash.bot_token_hash);
            console.log(botToken)
            const shopName = (await new Bot(botToken).api.getMe()).first_name;
            shopsKeyboard.text(`üõ°Ô∏è ${shopName}`, `manage_shop`).row();
        }
    
        shopsKeyboard.text("‚ùå –ù–∞–∑–∞–¥", "menu");
    
        await ctx.editMessageText("üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", {
            reply_markup: shopsKeyboard,
        });
    } catch(err) {

        console.error(err);
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–æ–º (—Ö–µ—à —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫–∞–∑–∞–Ω –≤ —Å–µ—Å—Å–∏–∏)
 * @param {Context} ctx
 */
export async function manageShopHandler(ctx) {
    const botToken = decryptData(ctx.session.currentBotTokenHash);
    const shop = activeShopBotsHandlers.get(ctx.session.currentBotTokenHash);
    const settingsKeyboard = new InlineKeyboard()
    const shop1 = run(botToken)
    shop1.isRunning
}