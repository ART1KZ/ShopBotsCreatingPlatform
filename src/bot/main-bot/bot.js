import { Bot, InlineKeyboard, session, Context } from "grammy";
import { decryptData, encryptData } from "../shared/utils/encryption.js";
import { createClient } from "@supabase/supabase-js";
import { createShopBot } from "../shop-bot/bot.js";
import {
    sendDontUnderstandErrorMessage,
    sendUnexpectedErrorMessage,
} from "../shared/utils/error.js";

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_KEY
);

export const bot = new Bot(process.env.BOT_TOKEN);

bot.use(
    session({
        initial: () => ({
            step: undefined, // –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
            token: undefined, // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        }),
    })
);

bot.command("start", async (ctx) => await menuScene(ctx));

bot.on("callback_query:data", async (ctx) => {
    const callbackData = ctx.callbackQuery.data;

    switch (callbackData) {
        case "menu":
            await menuScene(ctx, true);
            break;
        case "create_shop":
            await createShopScene(ctx);
            break;
        case "get_shops":
            await getShopsScene(ctx);
            break;
    }

    await ctx.answerCallbackQuery();
});

bot.on("message", async (ctx) => {
    switch (ctx.session.step) {
        case "token_input":
            await tokenInputScene(ctx);
            break;
        default:
            await sendDontUnderstandErrorMessage(ctx);
            break;
    }
});

bot.catch((error) => {
    console.log("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ", error);
    // sendUnexpectedErrorMessage(ctx, false, error);
});

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Context} ctx
 */
async function getShopsScene(ctx) {
    const shopsKeyboard = new InlineKeyboard();

    const messageSenderId = ctx.callbackQuery.from.id;

    // –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    const ownerShops = await supabase
        .from("shops")
        .select("*")
        .eq("owner_tg_id", messageSenderId);

    for (let shop of ownerShops.data) {
        shopsKeyboard.text(`üëë ${shop.name}`, `menu`).row();
    }

    const adminShops = [];
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    // –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ —Å–≤—è–∑—å—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏, –≥–¥–µ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    // const adminRelations = await supabase
    //     .from("administrators")
    //     .select("*")
    //     .eq("tg_user_id", messageSenderId);

    // for(let botTokenHash of adminRelations.data.bot_token_hash) {
    //     // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ —Ö—ç—à—É —Ç–æ–∫–µ–Ω–∞
    //     const shopInfo = await supabase
    //         .from("shops")
    //         .select("*")
    //         .eq("bot_token_hash", botTokenHash);
        
    //     adminShops.push(shopInfo.data);
    // }

    // for (let shop of adminShops) {
    //     shopsKeyboard.text(`üõ°Ô∏è ${shop.name}`, `menu`).row();
    // }

    shopsKeyboard.text("‚ùå –ù–∞–∑–∞–¥", "menu");

    await ctx.editMessageText("üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", {
        reply_markup: shopsKeyboard,
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {Context} ctx
 * @param {boolean} isEditMessage
 * –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
 */
async function menuScene(ctx, isEditMessage = false) {
    ctx.session.step = undefined;
    ctx.session.token = undefined;
    const keyboard = new InlineKeyboard()
        .text("üè¨ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", "create_shop")
        .row()
        .text("üõçÔ∏è –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã", "get_shops");

    const message =
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n" +
        "üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –≤ Telegram –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá";

    if (isEditMessage) {
        await ctx.editMessageText(message, {
            reply_markup: keyboard,
        });
    } else {
        await ctx.reply(message, {
            reply_markup: keyboard,
        });
    }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
 * @param {Context} ctx
 */
async function createShopScene(ctx) {
    ctx.session.step = "token_input";

    await ctx.editMessageText("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", {
        reply_markup: new InlineKeyboard().text("‚ùå –ù–∞–∑–∞–¥", "menu"),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @param {Context} ctx
 */
async function tokenInputScene(ctx) {
    ctx.session.step = undefined;

    const userMessage = ctx.message.text.trim();
    const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;

    if (!tokenRegex.test(userMessage)) {
        ctx.session.step = undefined;

        await ctx.reply(
            "üòì –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞\n" +
                "üëá –û–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n" +
                "<code>123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</code>",
            {
                parse_mode: "HTML",
                reply_markup: new InlineKeyboard()
                    .text("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", "create_shop")
                    .text("‚ùå –ù–∞–∑–∞–¥", "menu"),
            }
        );
        return;
    }

    const botTokenHash = encryptData(userMessage);
    const shopOwnerId = ctx.message.from.id;

    const { error } = await supabase
        .from("shops")
        .insert([{ bot_token_hash: botTokenHash, owner_tg_id: shopOwnerId }]);

    if (error) {
        // –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è bot_token_hash)
        if (error.code === "23505") {
            await ctx.reply(
                "üòì –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω",
                {
                    reply_markup: new InlineKeyboard()
                        .text("üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", "create_shop")
                        .text("‚ùå –ù–∞–∑–∞–¥", "menu"),
                }
            );
        } else {
            await sendUnexpectedErrorMessage(ctx, error);
        }
        return;
    }

    const shopBot = createShopBot(userMessage);
    shopBot.start();

    const shopBotUsername = (await shopBot.api.getMe()).username;

    await ctx.reply(
        "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n" +
            `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: t.me/${shopBotUsername}`,
        {
            reply_markup: new InlineKeyboard().text(
                "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "menu"
            ),
        }
    );
}
