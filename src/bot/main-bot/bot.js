import { Bot, InlineKeyboard, session } from "grammy";

export const bot = new Bot(process.env.BOT_TOKEN);

bot.use(
    session({
        initial: () => ({
            step: undefined, // –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
            token: undefined, // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        }),
    })
);

bot.command("start", async (ctx) => await showMenu(ctx));

bot.on("callback_query:data", async (ctx) => {
    const callbackData = ctx.callbackQuery.data;

    switch (callbackData) {
        case "menu":
            await showMenu(ctx, true);
            break;
        case "create_shop":
            await handleCreateShop(ctx);
            break;
        case "get_shops":
            await handleGetShops(ctx);
            break;
    }

    await ctx.answerCallbackQuery();
});

bot.on("message", async (ctx) => {
    switch (ctx.session.step) {
        case "token_input":
            await handleTokenInput(ctx);
            break;
    }
});

bot.catch((error) => {
    console.log("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ", error);
});

// TODO: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤-–±–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function handleGetShops(ctx) {}

// –û—Ç–ø—Ä–∞–≤–∫–∞ (–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ) —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é—à–∫–æ–π –±–æ—Ç–∞
async function showMenu(ctx, isEditMessage) {
    ctx.session.step = undefined;
    ctx.session.token = undefined;
    const keyboard = new InlineKeyboard();
    keyboard
        .text("üè¨ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", "create_shop")
        .row()
        .text("üõçÔ∏è –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã", "get_shops");

    const message =
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n" +
        "üöÄ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –≤ Telegram –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá";

    if (isEditMessage) {
        await ctx.editMessageText(message, {
            reply_markup: keyboard,
        });
    } else {
        await ctx.reply(message, {
            reply_markup: keyboard,
        });
    }
}

// –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —Ç–≥ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleCreateShop(ctx) {
    const backButton = new InlineKeyboard();
    backButton.text("‚ùå –ù–∞–∑–∞–¥", "menu");

    ctx.session.step = "token_input";
    await ctx.editMessageText("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", {
        reply_markup: backButton,
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
async function handleTokenInput(ctx) {
    const userMessage = ctx.message.text.trim();
    const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;
}

// bot.start();
