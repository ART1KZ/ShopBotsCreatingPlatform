import { Context, InlineKeyboard } from "grammy";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–æ–π –æ—à–∏–±–∫–æ–π
 * @param {Context} ctx
 * @param {boolean} isEditMessage
 * –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
 * @param {object} error
 * –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 */
export async function sendUnexpectedErrorMessage(
    ctx,
    isEditMessage = false,
    error = undefined
) {
    if (error) console.error(error);

    const message = "‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑";
    const menuKeyboard = new InlineKeyboard().row({
        text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data: "menu",
    });

    if (!isEditMessage)
        return await ctx.reply(message, { reply_markup: menuKeyboard });
    else
        return await ctx.editMessageText(
            "<b>‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
            { reply_markup: menuKeyboard }
        );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Context} ctx
 */
export async function sendDontUnderstandErrorMessage(ctx) {
    return await ctx.reply("ü§î –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤–≤–∏–¥—É", {
        reply_markup: new InlineKeyboard().row({
            text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data: "menu",
        })
    });
}
